@use "fonts";
@use "variables" as v;
@use "sass:color";
@use "sass:map";
@use "functions" as f;
@layer base {
	:root {


		

		@each $name, $color in v.$colors {
			@if ($name == "black" or $name == "white") {
				--#{$name}: #{color.scale($color, $space: hsl)};
			} @else {
				$baseLightness: color.channel($color, "lightness", $space: hsl);
				$baseHue: color.channel($color, "hue", $space: hsl);
				$baseSaturation: color.channel($color, "saturation", $space: hsl);
				@each $shade, $percent in v.$shades {
					$val: hsl($baseHue $baseSaturation $percent);
					@if (
						$percent <= $baseLightness and ($percent + 8%) >= $baseLightness
					) {
						$val: hsl(
							$baseHue $baseSaturation $baseLightness
						); // conserver la couleur d'entr√©e
					}
					--#{$name}-#{$shade}: #{color.scale($val, $space: hsl)};
				}
			}
		}

		$shadow-color: color.adjust(map.get(v.$colors, "black"), $alpha: -0.95);

		--border-color: var(--neutral-50);
		--background-color: var(--white);
		--shadow-color: #{$shadow-color};

		
		@media (prefers-color-scheme: dark) {
			$shadow-color: color.adjust(map.get(v.$colors, "white"), $alpha: -0.95);
			--border-color: var(--neutral-900);
			--background-color: var(--neutral-950);
			--shadow-color: #{$shadow-color};
		}


	}

	body {
		font-family: fonts.$font1;
		background-color: var(--white);
		color: var(--black);
		height: 100vh;

		@media (prefers-color-scheme: dark) {
			background-color: var(--background-color);
			color: var(--neutral-100);
		}
	}

	input {
		border-radius: f.rem(6);
		padding: f.rem(10) f.rem(16);
		border: solid thin currentColor;
		color: inherit;
		//background-color: var(--input-bg-color);
	}
}
